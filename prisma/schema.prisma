// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  about        String
  avatar       String?
  refreshToken String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Posts        Post[]
  PostComment  PostComment[]
}

model Post {
  id           String         @id @default(uuid())
  userId       String
  title        String
  tag          String
  content      String
  thumbnail    String?
  is_shared    Int
  postId       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  User         User           @relation(fields: [userId], references: [id])
  PostLiked    PostLiked[]
  PostComment  PostComment[]
  PostBookmark PostBookmark[]
  PostShared   PostShared[]
  PostParent   PostParent[]   @relation("PostParent")
  PostAsParent PostParent[]   @relation("PostAsParent")
  // PostParent   PostParent     @relation(fields: [id], references: [postParentId])
}

model PostParent {
  id           String   @id @default(uuid())
  postId       String
  postParentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Post         Post     @relation("PostParent", fields: [postId], references: [id])
  PostAsParent Post     @relation("PostAsParent", fields: [postParentId], references: [id])
  // Post         Post[]
}

model PostLiked {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [id])
}

model PostComment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  comment   String
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
}

model PostReplyComment {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostBookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [id])
}

model PostShared {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [id])
}
